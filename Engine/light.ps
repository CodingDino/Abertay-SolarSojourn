// Solar Exploration Sim
// Developed a coursework for Abertay University
// Based on tutorials from http://www.rastertek.com
// Copyright Sarah Herzog, 2013, all rights reserved.
//
// light.ps
//      Pixel shader for handling simple textured shapes with lighting


// |----------------------------------------------------------------------------|
// |                                 Globals                                    |
// |----------------------------------------------------------------------------|
Texture2D shaderTexture;
SamplerState SampleType;
cbuffer PixelBuffer
{
	float4 tint;
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
    float padding;
};


// |----------------------------------------------------------------------------|
// |                             Type Definitions                               |
// |----------------------------------------------------------------------------|
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};

// |----------------------------------------------------------------------------|
// |                              Pixel Shader                                  |
// |----------------------------------------------------------------------------|
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 color;
    float4 textureColor;
    float4 lightColor;
    float3 lightDir;
    float lightIntensity;
    float3 reflection;
    float4 specular;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);
    
    // Set default light color to ambient color
    lightColor = ambientColor;

    // Initialize the specular color.
    specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        lightColor += (diffuseColor * lightIntensity);
        
        // Saturate the ambient and diffuse color.
        lightColor = saturate(lightColor);

        // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
        reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

        // Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    // Combine texture, tint, and light to get final color
    color = textureColor * tint * lightColor;

    // Add the specular component last to the output color.
    color = saturate(color + specular);

    return color;
}