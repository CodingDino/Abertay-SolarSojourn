// Solar Exploration Sim
// Developed a coursework for Abertay University
// Based on tutorials from http://www.rastertek.com
// Copyright Sarah Herzog, 2013, all rights reserved.
//
// Main
//      Program wrapper.

// TODO: Convert all message boxes to use debug function


// Feature plans
// 
// Needed fixes:
//        - Complete Program Restructure
//        - Particle System Fix: billboarding, spawn/death, alpha fade
//        - Mouse-Assisted Camera Control
//        - Select-able Planets
//
// Bonus Features:
//        - Additional Moons/Dwarf Planets
//        - Lighting effects: bloom, glare, lens flare
//        - Re-sizing and re-positioning of planets for realism
//        - Asteroid Field: Dynamically generated?
//        - Planetary Rings (Saturn, etc.): A simple disk with a partially 
//            transparent texture.
//        - Coordinate Readout
//        - Representation of Planetary Orbit (line)
//        - Planetary information display: It would follow the theme to have 
//            planetary information displayed to the user on their screen. A 
//            fancy target-lock would be really awesome, with text on the screen 
//            with information about the planet. Maybe voiceover
//
// Basic Terrain Generation:
//        - Mountainous Terrain based on Parameters
//        - Planet color/texture
//        - Navigation on Planet Surface: The user will have to navigate on the 
//            planet surface somehow. Most likely this will start as first 
//            person perspective.
//        - Gravity: Gravity WILL be in effect on the planet, and the user 
//            will be in a ground vehicle, so it will limit their travel. Gravity 
//            will be different for each planet!
//
// Bonus Features:
//        - Dynamic Sky Box: When landing on a planet, a sky box is dynamically  
//            generated by rendering the scene from the planet center to texture
//        - Gaseous Planets: It would be cool to be able to fly down through 
//            gaseous planets. However, this might be too difficult.
//        - Asteroids: It would be excellent if dynamic asteroid generation 
//            was possible. Since asteroids are very small compared to planets, 
//            perhaps the user can select the asteroid belt as a whole and fly 
//            around through it, only then seeing the asteroids up close enough 
//            to see the dynamic geometry generation. When in the main space view, 
//            they can just be spheres or a few "lumpy" asteroid models.
//        - Water: Landing on Earth, it would be quite likely to land near water. 
//            Water effects would make this much more realistic.
//        - Plant-life: Likewise, some plant life would make an Earth landing 
//            much more realistic.
//        - Volcanoes: These are quite common on some planets, so these would be 
//            great geometry to look at, as well as some special effects involving 
//            lava.
//        - Precipitation: In addition to rain on Earth, some planets have their 
//            own precipitation of various types (acid rain on Venus for example).
//        - Ice: Some planets have ice of various types (Mars for example).
//        - Sun/Moons: Seeing the sun or moon (or planets) from the planet 
//            surface would be interesting too, especially if time passed normally 
//            while there and the time the user landed actually dictated the time 
//            of day on planet (see dynamic sky box)
//        - Rover device: Rather than a purely first person perspective, it might 
//            be cool to see a little animated rover running around on the planet 
//            surface.
//        - Gameplay objectives: Adding in samples to be taken or some other kind 
//            of objective would make the game more interesting.


// |----------------------------------------------------------------------------|
// |                                Includes                                    |
// |----------------------------------------------------------------------------|
#include "SystemManager.h"


// |----------------------------------------------------------------------------|
// |                                 WinMain                                    |
// |----------------------------------------------------------------------------|
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR pScmdline, int iCmdshow)
{
    SystemManager* system;
    bool result;
    
    
    // Create the system object.
    system = new SystemManager();
    if(!system)
    {
        return 0;
    }

    // Initialize and run the system object.
    result = system->Initialize();
    if(result)
    {
        system->Run();
    }

    // Shutdown and release the system object.
    system->Shutdown();
    delete system;
    system = 0;

    return 0;
}